initialize() {
	
	defineConstant("species", "Human");	// "Human" or "Dmel" (Drosophila melanogaster)
	defineConstant("mapFolder", "/Users/Who/folderWhereLinkageMapsAre/");
	
	defineConstant("resultsFolder", "/Users/Who/folderToWhereResultsShouldBeWritten/");
	defineConstant("resultsFile", resultsFolder+"overallIntrogressedFraction.csv");

	defineConstant("L", 1000);	// number of loci at which introgressed allele is deleterious
	defineConstant("S", 0.4);	// strength of selection against introgresed ancestry:
										// relative fitness reduction of a 100% introgressed genome
	defineConstant("N", 100000);	// population size
	defineConstant("hyb_frac", 0.1);	// fraction of F1 hybrids in initial admixed population
	defineConstant("hybs", asInteger(round(hyb_frac*N))); // number of F1 hybrids
	initializeMutationRate(0);
   initializeMutationType("m1", 0.5, "f", 0);	// the m1 "mutation" marks the introgressed allele at each locus
   m1.convertToSubstitution = F;
   initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, L-1);
	
	initializeSex("A");
	
	// input male recombination
 lines = readFile(mapFolder + "linkageMapForSLiM_" + species + "_Male_1kLoci.txt");
 rates = NULL;
for (line in lines)
 {
 components = strsplit(line, "\t");
 rates = c(rates, asFloat(components[0]));
 }
 initializeRecombinationRate(rates, 1:(L-1), sex="M");
 
 // input female recombination
 
 lines = readFile(mapFolder + "linkageMapForSLiM_" + species + "_Female_1kLoci.txt");
 rates = NULL;
for (line in lines)
 {
 components = strsplit(line, "\t");
 rates = c(rates, asFloat(components[0]));
 }
 initializeRecombinationRate(rates, 1:(L-1), sex="F");
}


1 early() {
	sim.addSubpop("p1", N);
}


// determine each individual's fitness

fitnessEffect() {
 introgressed = sum(c(individual.genome1,individual.genome2).countOfMutationsOfType(m1));
return 1.0 - (introgressed/(2*L))*S;	// fitness = 1 - (introgressed fraction of genome) x S
}


// construct initial population consisting of [#hybs F1 hybrids and N-hybs individuals with zero introgressed ancestry] by assigning to #hybs individuals the m1 mutation at every locus on a single haploid genome

1 late() {
	allIndividuals = p1.individuals;
	sampledIndividuals = sample(p1.individuals, hybs);
   sampledIndividuals.genome1.addNewMutation(m1, 0, 0:(L-1));
	}


// output the population's overall introgressed fraction

1: late() {
   inds = p1.individuals;
   inds_introgressed = inds.countOfMutationsOfType(m1);
   //catn(mean(inds_introgressed)/(2*L));
   introgFrac = mean(inds_introgressed)/(2*L);
   writeFile(resultsFile, ""+introgFrac, append=T);
   }	
	

2000 early() { sim.simulationFinished(); } 
